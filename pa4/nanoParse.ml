type token =
  | Num of (int)
  | EOF
  | TRUE
  | FALSE
  | Id of (string)
  | LET
  | REC
  | EQ
  | IN
  | FUN
  | IF
  | ELSE
  | LBRACE
  | RBRACE
  | LPAREN
  | RPAREN
  | PLUS
  | MINUS
  | MUL
  | DIV
  | LT
  | LE
  | NE
  | AND
  | OR
  | LBRACK
  | RBRACK
  | SEMI
  | COLONCOLON

open Parsing;;
# 2 "nanoParse.mly"
(* See this for a tutorial on ocamlyacc 
 * http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamlyacc-tutorial/ *)
open Nano 

# 39 "nanoParse.ml"
let yytransl_const = [|
    0 (* EOF *);
  258 (* TRUE *);
  259 (* FALSE *);
  261 (* LET *);
  262 (* REC *);
  263 (* EQ *);
  264 (* IN *);
  265 (* FUN *);
  266 (* IF *);
  267 (* ELSE *);
  268 (* LBRACE *);
  269 (* RBRACE *);
  270 (* LPAREN *);
  271 (* RPAREN *);
  272 (* PLUS *);
  273 (* MINUS *);
  274 (* MUL *);
  275 (* DIV *);
  276 (* LT *);
  277 (* LE *);
  278 (* NE *);
  279 (* AND *);
  280 (* OR *);
  281 (* LBRACK *);
  282 (* RBRACK *);
  283 (* SEMI *);
  284 (* COLONCOLON *);
    0|]

let yytransl_block = [|
  257 (* Num *);
  260 (* Id *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\003\000\004\000\006\000\007\000\007\000\011\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\003\000\003\000\002\000\002\000\003\000\002\000\001\000\001\000\
\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\023\000\024\000\025\000\026\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
\000\000\000\000\019\000\000\000\001\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\000\000\000\000\000\000\000\000\008\000\009\000\010\000\
\011\000\012\000\013\000\014\000\015\000\016\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\007\000"

let yydgoto = "\002\000\
\012\000\013\000"

let yysindex = "\002\000\
\072\255\000\000\000\000\000\000\000\000\000\000\252\254\246\254\
\247\254\072\255\038\255\000\000\001\000\255\254\004\255\007\255\
\072\255\091\255\000\000\039\255\000\000\072\255\000\000\072\255\
\072\255\072\255\005\255\254\254\000\255\000\000\072\255\072\255\
\072\255\072\255\072\255\072\255\072\255\072\255\072\255\113\255\
\039\255\039\255\039\255\042\255\072\255\002\255\006\255\116\255\
\119\255\123\255\141\255\145\255\148\255\151\255\155\255\173\255\
\000\000\072\255\177\255\072\255\072\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\255\072\255\
\180\255\183\255\039\255\000\000\008\255\010\255\072\255\205\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\079\000\104\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\129\000\000\000\
\000\000\000\000\154\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\255\255"

let yytablesize = 435
let yytable = "\014\000\
\021\000\015\000\001\000\016\000\017\000\026\000\022\000\027\000\
\018\000\020\000\028\000\045\000\046\000\060\000\047\000\029\000\
\040\000\061\000\078\000\000\000\041\000\079\000\042\000\043\000\
\044\000\023\000\024\000\025\000\020\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\003\000\004\000\
\005\000\006\000\007\000\059\000\000\000\022\000\008\000\009\000\
\022\000\058\000\000\000\010\000\000\000\017\000\000\000\000\000\
\071\000\000\000\073\000\074\000\000\000\000\000\011\000\019\000\
\023\000\024\000\025\000\023\000\024\000\025\000\075\000\000\000\
\003\000\004\000\005\000\006\000\007\000\080\000\021\000\000\000\
\008\000\009\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\003\000\004\000\005\000\006\000\007\000\
\011\000\022\000\000\000\008\000\009\000\000\000\000\000\018\000\
\010\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\011\000\023\000\024\000\025\000\022\000\
\000\000\000\000\022\000\000\000\000\000\022\000\000\000\057\000\
\004\000\022\000\062\000\000\000\000\000\063\000\000\000\000\000\
\000\000\064\000\023\000\024\000\025\000\023\000\024\000\025\000\
\023\000\024\000\025\000\022\000\023\000\024\000\025\000\022\000\
\000\000\005\000\022\000\065\000\000\000\022\000\000\000\066\000\
\000\000\022\000\067\000\000\000\000\000\068\000\023\000\024\000\
\025\000\069\000\023\000\024\000\025\000\023\000\024\000\025\000\
\023\000\024\000\025\000\022\000\023\000\024\000\025\000\022\000\
\072\000\000\000\022\000\070\000\000\000\022\000\000\000\000\000\
\076\000\000\000\000\000\077\000\000\000\000\000\023\000\024\000\
\025\000\000\000\023\000\024\000\025\000\023\000\024\000\025\000\
\023\000\024\000\025\000\022\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\024\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\000\024\000\025\000\020\000\020\000\020\000\
\020\000\020\000\000\000\000\000\020\000\020\000\020\000\000\000\
\000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\017\000\017\000\
\017\000\017\000\017\000\000\000\000\000\017\000\017\000\017\000\
\000\000\000\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\021\000\
\021\000\021\000\021\000\021\000\000\000\000\000\021\000\021\000\
\021\000\000\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\018\000\018\000\018\000\018\000\018\000\000\000\000\000\018\000\
\018\000\018\000\000\000\000\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
\004\000\004\000\004\000\000\000\000\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\005\000\005\000\005\000\005\000\005\000\000\000\
\000\000\005\000\005\000\005\000\000\000\000\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000"

let yycheck = "\004\001\
\000\000\006\001\001\000\014\001\014\001\007\001\007\001\004\001\
\010\000\011\000\004\001\007\001\015\001\012\001\015\001\017\000\
\018\000\012\001\011\001\255\255\022\000\012\001\024\000\025\000\
\026\000\026\001\027\001\028\001\000\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\001\001\002\001\
\003\001\004\001\005\001\045\000\255\255\007\001\009\001\010\001\
\007\001\008\001\255\255\014\001\255\255\000\000\255\255\255\255\
\058\000\255\255\060\000\061\000\255\255\255\255\025\001\026\001\
\026\001\027\001\028\001\026\001\027\001\028\001\072\000\255\255\
\001\001\002\001\003\001\004\001\005\001\079\000\000\000\255\255\
\009\001\010\001\255\255\255\255\255\255\014\001\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\025\001\007\001\255\255\009\001\010\001\255\255\255\255\000\000\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\007\001\
\255\255\255\255\007\001\255\255\255\255\007\001\255\255\015\001\
\000\000\007\001\015\001\255\255\255\255\015\001\255\255\255\255\
\255\255\015\001\026\001\027\001\028\001\026\001\027\001\028\001\
\026\001\027\001\028\001\007\001\026\001\027\001\028\001\007\001\
\255\255\000\000\007\001\015\001\255\255\007\001\255\255\015\001\
\255\255\007\001\015\001\255\255\255\255\015\001\026\001\027\001\
\028\001\015\001\026\001\027\001\028\001\026\001\027\001\028\001\
\026\001\027\001\028\001\007\001\026\001\027\001\028\001\007\001\
\008\001\255\255\007\001\015\001\255\255\007\001\255\255\255\255\
\013\001\255\255\255\255\013\001\255\255\255\255\026\001\027\001\
\028\001\255\255\026\001\027\001\028\001\026\001\027\001\028\001\
\026\001\027\001\028\001\007\001\255\255\255\255\255\255\255\255\
\255\255\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\028\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\010\001\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001"

let yynames_const = "\
  EOF\000\
  TRUE\000\
  FALSE\000\
  LET\000\
  REC\000\
  EQ\000\
  IN\000\
  FUN\000\
  IF\000\
  ELSE\000\
  LBRACE\000\
  RBRACE\000\
  LPAREN\000\
  RPAREN\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  LT\000\
  LE\000\
  NE\000\
  AND\000\
  OR\000\
  LBRACK\000\
  RBRACK\000\
  SEMI\000\
  COLONCOLON\000\
  "

let yynames_block = "\
  Num\000\
  Id\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 45 "nanoParse.mly"
          ( _1 )
# 289 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 47 "nanoParse.mly"
                     (_2)
# 296 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 48 "nanoParse.mly"
                         ( App (_2, _3) )
# 304 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 49 "nanoParse.mly"
                         (Let (_2, _4, _6) )
# 313 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 50 "nanoParse.mly"
                           (LetRec(_3, _5, _7) )
# 322 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 51 "nanoParse.mly"
                                         (Fun (_3, _6))
# 330 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 53 "nanoParse.mly"
    (If (_3, _6, _10))
# 339 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 54 "nanoParse.mly"
                             ( BinaryOp (_2, Plus, _4))
# 347 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 55 "nanoParse.mly"
                              ( BinaryOp (_2, Minus, _4))
# 355 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 56 "nanoParse.mly"
                            ( BinaryOp (_2, Mul, _4))
# 363 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 57 "nanoParse.mly"
                            ( BinaryOp (_2, Div, _4))
# 371 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 58 "nanoParse.mly"
                           ( BinaryOp (_2, Lt, _4))
# 379 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 59 "nanoParse.mly"
                           ( BinaryOp (_2, Le, _4))
# 387 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 60 "nanoParse.mly"
                           ( BinaryOp (_2, Ne, _4))
# 395 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 61 "nanoParse.mly"
                            ( BinaryOp (_2, And, _4))
# 403 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 62 "nanoParse.mly"
                           ( BinaryOp (_2, Or, _4) )
# 411 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 63 "nanoParse.mly"
               ( BinaryOp (_1, Eq, _3) )
# 419 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 64 "nanoParse.mly"
                       ( BinaryOp (_1, Cons, _3))
# 427 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "nanoParse.mly"
                  ( Nil)
# 433 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 66 "nanoParse.mly"
                ( _2 )
# 440 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 67 "nanoParse.mly"
                 ( BinaryOp (_1, Cons, _3))
# 448 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 68 "nanoParse.mly"
               ( BinaryOp (_1, Cons, Nil))
# 455 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 69 "nanoParse.mly"
                                ( Int _1 )
# 462 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "nanoParse.mly"
          ( Bool(true) )
# 468 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "nanoParse.mly"
           ( Bool(false) )
# 474 "nanoParse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "nanoParse.mly"
        ( Var (_1) )
# 481 "nanoParse.ml"
               : 'exp))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Nano.expr)
